# -*- coding: utf-8 -*-
"""Dataset+Backbone.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YWt8QQT_zi_AxHNNnUMHUgJEyKqAqAoI

##IMPORTS
"""

import torch.nn as nn
import torch.nn.functional as F
import torch
import torchvision
import os
import numpy as np

from PIL import ImageEnhance
from PIL import Image
import json
from abc import abstractmethod
import torchvision.transforms as transforms

"""# Dataset and DataLoader"""

class ImageJitter(object):
  def __init__(self, transformdict):
    transformtypedict = dict(Brightness=ImageEnhance.Brightness, Contrast=ImageEnhance.Contrast, Sharpness=ImageEnhance.Sharpness, Color=ImageEnhance.Color)
    self.transforms = [(transformtypedict[k], transformdict[k]) for k in transformdict]

  def __call__(self, img):
    out = img
    randtensor = torch.rand(len(self.transforms))

    for i, (transformer, alpha) in enumerate(self.transforms):
      r = alpha*(randtensor[i]*2.0 -1.0) + 1
      out = transformer(out).enhance(r).convert('RGB')

    return out

class TransformLoader:
  def __init__(self, image_size,
      normalize_param = dict(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
      jitter_param = dict(Brightness=0.4, Contrast=0.4, Color=0.4)):
    self.image_size = image_size
    self.normalize_param = normalize_param
    self.jitter_param = jitter_param
  def parse_transform(self, transform_type):
    if transform_type=='ImageJitter':
      method = ImageJitter( self.jitter_param )
      return method
    method = getattr(transforms, transform_type) #return attrbution name

    if transform_type=='RandomResizedCrop':
      return method(self.image_size)
    elif transform_type=='CenterCrop':
      return method(self.image_size)
    elif transform_type=='Resize':
      return method([int(self.image_size*1.15), int(self.image_size*1.15)])
    elif transform_type=='Normalize':
      return method(**self.normalize_param )
    else:
      return method()

  def get_composed_transform(self, aug = False):
    if aug:
      transform_list = ['RandomResizedCrop', 'ImageJitter', 'RandomHorizontalFlip', 'ToTensor', 'Normalize']
    else:
      transform_list = ['Resize','CenterCrop', 'ToTensor', 'Normalize']#guiyihua

    transform = transforms.Compose([self.parse_transform(x) for x in transform_list])
    return transform

identity = lambda x:x
class SubDataset():
  def __init__(self, sub_meta, cl, transform=transforms.ToTensor(), target_transform=identity, min_size=50):
    self.sub_meta = sub_meta
    self.cl = cl
    self.transform = transform
    self.target_transform = target_transform
    if len(self.sub_meta) < min_size:
      idxs = [i % len(self.sub_meta) for i in range(min_size)]
      self.sub_meta = np.array(self.sub_meta)[idxs].tolist()

  def __getitem__(self,i):
    image_path = os.path.join(self.sub_meta[i]) # submeta is the list of images 
    img = Image.open(image_path).convert('RGB')
    img = self.transform(img)
    target = self.target_transform(self.cl)
    return img, target

  def __len__(self):
    return len(self.sub_meta)

class EpisodicBatchSampler(object):
  def __init__(self, n_classes, n_way, n_episodes):
    self.n_classes = n_classes
    self.n_way = n_way
    self.n_episodes = n_episodes

  def __len__(self):
    return self.n_episodes

  def __iter__(self):
    for i in range(self.n_episodes):
      yield torch.randperm(self.n_classes)[:self.n_way]

class MyDataset():
  def __init__(self, data_file, batch_size, transform):
    with open(data_file, 'r') as f:
      self.meta = json.load(f)

    self.cl_list = np.unique(self.meta['image_labels']).tolist()

    self.sub_meta = {}
    for cl in self.cl_list:
      self.sub_meta[cl] = []

    for x,y in zip(self.meta['image_names'],self.meta['image_labels']):
      self.sub_meta[y].append(x)

    self.sub_dataloader = []
    sub_data_loader_params = dict(batch_size = batch_size,
          shuffle = True,
          num_workers = 0, #use main thread only or may receive multiple batches
          pin_memory = False)
    
    for cl in self.cl_list:
      sub_dataset = SubDataset(self.sub_meta[cl], cl, transform = transform)
      self.sub_dataloader.append( torch.utils.data.DataLoader(sub_dataset, **sub_data_loader_params) )
      
  def __getitem__(self,i):
    return next(iter(self.sub_dataloader[i]))

  def __len__(self):
    return len(self.cl_list)

class DataManager():
  @abstractmethod
  def get_data_loader(self, data_file, aug):
    pass

class MyDataManager(DataManager):
  def __init__(self, image_size, n_way, n_support, n_query, n_episode=100):
    print("nsupport", n_support, "n_query", n_query)
    super(MyDataManager, self).__init__()
    self.image_size = image_size
    self.n_way = n_way
    self.batch_size = n_support + n_query
    self.n_episode = n_episode

    self.trans_loader = TransformLoader(image_size)#

  def get_data_loader(self, data_file, aug): #parameters that would change on train/val set
    transform = self.trans_loader.get_composed_transform(aug)
    # if isinstance(data_file, list):
    #   dataset = MultiSetDataset( data_file , self.batch_size, transform )
    #   sampler = MultiEpisodicBatchSampler(dataset.lens(), self.n_way, self.n_eposide )
    # else:
    dataset = MyDataset(data_file , self.batch_size, transform)
    sampler = EpisodicBatchSampler(len(dataset), self.n_way, self.n_episode)

    data_loader = torch.utils.data.DataLoader(dataset, batch_sampler = sampler)
    return data_loader

"""#Fast weight modules"""

class Linear_fw(nn.Linear):  # used in MAML to forward input with fast weight
    def __init__(self, in_features, out_features, bias=True):
        super(Linear_fw, self).__init__(in_features, out_features, bias=bias)
        self.weight.fast = None  # Lazy hack to add fast weight link
        self.bias.fast = None

    def forward(self, x):
        if self.weight.fast is not None and self.bias.fast is not None:
            out = F.linear(x, self.weight.fast, self.bias.fast)
        else:
            out = super(Linear_fw, self).forward(x)
        return out

class Conv2d_fw(nn.Conv2d):  # used in MAML to forward input with fast weight
    def __init__(self, in_channels, out_channels, kernel_size, stride=1, padding=0, bias=True):
        super(Conv2d_fw, self).__init__(in_channels, out_channels, kernel_size, stride=stride, padding=padding,
                                        bias=bias)
        self.weight.fast = None
        if not self.bias is None:
            self.bias.fast = None

    def forward(self, x):
        if self.bias is None:
            if self.weight.fast is not None:
                out = F.conv2d(x, self.weight.fast, None, stride=self.stride, padding=self.padding)
            else:
                out = super(Conv2d_fw, self).forward(x)
        else:
            if self.weight.fast is not None and self.bias.fast is not None:
                out = F.conv2d(x, self.weight.fast, self.bias.fast, stride=self.stride, padding=self.padding)
            else:
                out = super(Conv2d_fw, self).forward(x)
        return out

class BatchNorm2d_fw(nn.BatchNorm2d):
    def __init__(self, num_features, momentum=0.1, track_running_stats=True):
        super(BatchNorm2d_fw, self).__init__(num_features, momentum=momentum, track_running_stats=track_running_stats)
        self.weight.fast = None
        self.bias.fast = None
        if self.track_running_stats:
            self.register_buffer('running_mean', torch.zeros(num_features))
            self.register_buffer('running_var', torch.zeros(num_features))
        self.reset_parameters()

    def reset_running_stats(self):
        if self.track_running_stats:
            self.running_mean.zero_()
            self.running_var.fill_(1)

    def forward(self, x, step=0):
        if self.weight.fast is not None and self.bias.fast is not None:
            weight = self.weight.fast
            bias = self.bias.fast
        else:
            weight = self.weight
            bias = self.bias
        if self.track_running_stats:
            out = F.batch_norm(x, self.running_mean, self.running_var, weight, bias, training=self.training,
                               momentum=self.momentum)
        else:
            out = F.batch_norm(x, torch.zeros(x.size(1), dtype=x.dtype, device=x.device),
                               torch.ones(x.size(1), dtype=x.dtype, device=x.device), weight, bias, training=True,
                               momentum=1)
        return out

class BatchNorm1d_fw(nn.BatchNorm1d):
    def __init__(self, num_features, momentum=0.1, track_running_stats=True):
        super(BatchNorm1d_fw, self).__init__(num_features, momentum=momentum, track_running_stats=track_running_stats)
        self.weight.fast = None
        self.bias.fast = None
        if self.track_running_stats:
            self.register_buffer('running_mean', torch.zeros(num_features))
            self.register_buffer('running_var', torch.zeros(num_features))
        self.reset_parameters()

    def reset_running_stats(self):
        if self.track_running_stats:
            self.running_mean.zero_()
            self.running_var.fill_(1)

    def forward(self, x, step=0):
        if self.weight.fast is not None and self.bias.fast is not None:
            weight = self.weight.fast
            bias = self.bias.fast
        else:
            weight = self.weight
            bias = self.bias
        if self.track_running_stats:
            out = F.batch_norm(x, self.running_mean, self.running_var, weight, bias, training=self.training,
                               momentum=self.momentum)
        else:
            out = F.batch_norm(x, torch.zeros(x.size(1), dtype=x.dtype, device=x.device),
                               torch.ones(x.size(1), dtype=x.dtype, device=x.device), weight, bias, training=True,
                               momentum=1)
        return out

"""# BackBone"""

class Backbone(nn.Module):
  def __init__(self):
    super(Backbone, self).__init__()
    resnet18 = torchvision.models.resnet18(pretrained=True)
    if torch.cuda.is_available():
      resnet18.cuda()
    # Copy the entire convolutional part
    self.features = nn.Sequential(*list(resnet18.children())[:-1])

  def forward(self, x):
    x = self.features(x)
    x = x.view(x.size(0), -1)
    return x

"""#GNN"""

MAML = True
class GE(nn.Module): 
  '''
    Predict next time graph edges in GNN
  '''
  def __init__(self,input_size,sizes, dropout = 0.3, activation = nn.Softmax(dim=1)):
    '''
      input_size: input size of the network
      output_size: output size of the network
      sizes: intermediate sizes of the network
    '''
    super(GE, self).__init__()
    assert len(sizes) == 4

    # use MAML version in paper of linear, conv and BatchNorm1d in code
    self.input_size = input_size
    self.dropout = dropout
    if MAML: 
      modules = [ 
            Conv2d_fw(input_size, sizes[0], 1, stride=1),
            BatchNorm2d_fw(sizes[0], track_running_stats=False),
            nn.LeakyReLU(),
            Conv2d_fw(sizes[0], sizes[1], 1, stride=1),
            BatchNorm2d_fw(sizes[1], track_running_stats=False),
            nn.LeakyReLU(),
            Conv2d_fw(sizes[1], sizes[2], 1, stride=1), 
            nn.BatchNorm2d(sizes[2], track_running_stats=False),
            Conv2d_fw(sizes[2], sizes[3], 1, stride=1),
            BatchNorm2d_fw(sizes[3], track_running_stats=False),
            nn.LeakyReLU(),
            Conv2d_fw(sizes[3], 1, 1, stride=1)
      ]
    else : 
      modules = [
            nn.Conv2d(input_size, sizes[0], 1, stride=1),
            nn.BatchNorm2d(sizes[0], track_running_stats=False),
            nn.LeakyReLU(),
            nn.Conv2d(sizes[0], sizes[1], 1, stride=1),
            nn.BatchNorm2d(sizes[1], track_running_stats=False),
            nn.LeakyReLU(),
            nn.Conv2d(sizes[1], sizes[2], 1, stride=1), 
            nn.BatchNorm2d(sizes[2], track_running_stats=False),
            nn.Conv2d(sizes[2], sizes[3], 1, stride=1),
            nn.BatchNorm2d(sizes[3], track_running_stats=False),
            nn.LeakyReLU(),
            nn.Conv2d(sizes[3], 1, 1, stride=1)
      ]
    if self.dropout > 0:
      modules.insert(3,nn.Dropout(self.dropout))
      
    self.model = nn.Sequential(*modules)
    self.activation = activation

  def forward(self, data): # verified
    
    X, W, W_init = data
    X1 = X.unsqueeze(2) 
    X2 = torch.transpose(X1, 1, 2) 
    W_new = torch.abs(X1 - X2) # compare each x to all others
    W_new = torch.transpose(W_new, 1, 3) 

    W_new = self.model(W_new)

    W_new = torch.transpose(W_new, 1, 3)

    W_new = W_new - W_init.expand_as(W_new) * 1e8 # why?
  
    # Applying Softmax
    W_new = torch.transpose(W_new, 2, 3)
    W_new_size = W_new.size()
    W_new = W_new.reshape(-1, W_new.size(3))
    W_new = self.activation(W_new) # apply softmax on matrice lines
    W_new = W_new.view(W_new_size)
    # Softmax applied
    W_new = torch.transpose(W_new, 2, 3)    
    W_new = torch.cat((W_init, W_new),axis = 3) # concatenate

    return X, W_new, W_init

class GO(nn.Module):
  '''
    Predict next time feature representation in GNN
  '''
  
  def __init__(self,input_size,output_size,batch_norm = True,leaky_relu = True):
    super(GO, self).__init__()
    # use MAML version in paper of linear and BatchNorm1d in code
    self.input_size = input_size
    self.output_size = output_size
    self.batch_norm = batch_norm
    
    if MAML:
      self.fc = Linear_fw(self.input_size, self.output_size) 
      if self.batch_norm:
        self.bn = BatchNorm1d_fw(self.output_size, track_running_stats=False)
    else:
      self.fc = nn.Linear(self.input_size, self.output_size) 
      if self.batch_norm:
        self.bn = nn.BatchNorm1d(self.output_size, track_running_stats=False)
   
    self.leaky_relu = leaky_relu

  def forward(self, data):
    X, W, W_init = data
    
    X_next = self.combine_neighbours(W,X)
    
    X_next = self.fc(X_next) 
    if self.batch_norm:
      X_shape = X_next.shape 
      X_next = X_next.flatten(0,1) # flatten for batch norm
      X_next = self.bn(X_next)
      X_next = X_next.view(X_shape) # reconstruct
    if self.leaky_relu: 
      X_next = F.leaky_relu(X_next)
    X_next = torch.cat((X,X_next),dim = 2)
    return X_next, W, W_init

  def combine_neighbours(self,W,X):
    '''
      X: all nodes of size K*(N+1)xself.input_size
      W: all edges coefficients of size K*(N+1)xK*(N+1) (W[i,j] corresponding to psi(xi,xj))
      return size K*(N+1)xself.input_size element
    '''

    W_size = W.size()
    nb_nodes = W_size[-2]
    W = W.split(1, 3) # split last dim to get one output for each possible W
    W = torch.cat(W, 1).squeeze(3) # get all possible W together
    output = torch.bmm(W, X) # compute combination
    output = output.split(nb_nodes, 1) # separate output by nodes
    output = torch.cat(output, 2) # get all nodes together
    return output

class GNN(nn.Module):
  def __init__(self, input_features, nf, n_way, n_support):
    """
      K: number of classes
      N: number of supports by class
      GE_input_sizes: entry sizes of different layers of GE / in paper: [128+N, 176+N, 224+N] [133, 181, 229] 
      GO_input_sizes: entry sizes of different layers of GO / in paper: [256+2*N, 352+2*N, 448+2*N]
      GE_sizes: intermediate sizes of the GE / in paper: [96*2,96*2,96,96]
      GO_output_size: output size of GO for intermediate outputs (without concatenation) / in paper: 48
    """
    super(GNN, self).__init__()
    self.N = n_support
    self.K = n_way
    GE_sizes = [nf*2, nf*2, nf, nf]
    GE_input_sizes = [input_features + int(nf / 2) * i for i in range(3)]
    GO_input_sizes = [2 * s for s in GE_input_sizes]
    GO_output_size = 48   
    modules = []
    

    for i in range(len(GO_input_sizes)):
        
      modules.append(GE(GE_input_sizes[i], \
                     sizes = [GE_sizes[0],GE_sizes[1],GE_sizes[2],GE_sizes[3]],dropout = 0.3))
      modules.append(GO(GO_input_sizes[i], n_way if i == len(GO_input_sizes) - 1 else GO_output_size,batch_norm = i != len(GO_input_sizes) - 1,leaky_relu= i != len(GO_input_sizes) - 1)) 
      
    self.model = nn.Sequential(*modules)

 
  def forward(self, data):
    
    '''
      data should correspond to X
      X should be of size ((nb queries) x (nb supports + K) x (feature_size + 1)) -> for each querry we want all K querries with their supports, querries should be after supports (+ 1 in feature_size correspond to label)
      Return new X and W
    '''
    X = data
    W_init = torch.eye(self.K*(self.N + 1))
    if torch.cuda.is_available():
        W_init = W_init.cuda()
    assert W_init.shape == (self.K*(self.N + 1),self.K*(self.N + 1))
    assert X.shape[1] == self.K*self.N + self.K
    W_init = W_init.unsqueeze(0).repeat(X.shape[0],1,1).unsqueeze(-1)
    X, W, W_init = self.model((X,W_init,W_init))
    return X, W

"""#General Model"""

class Model(nn.Module):
  def __init__(self, n_way, n_support, n_query, feature_dim, backbone = None):
    super(Model, self).__init__()
    self.n_way      = n_way
    self.n_support  = n_support
    self.n_query    = n_query
    self.feature    = backbone
    self.feature_dim   = feature_dim

    self.loss = nn.CrossEntropyLoss()
    if MAML:
      self.fc = nn.Sequential(Linear_fw(feature_dim, 128), BatchNorm1d_fw(128, track_running_stats = False))
    else:
      self.fc = nn.Sequential(nn.Linear(feature_dim, 128), nn.BatchNorm1d(128, track_running_stats = False))
    # self.prime2 = GNN_nl(128 + self.n_way, 96, self.n_way)
    self.prime = GNN(128 + self.n_way, 96, self.n_way, self.n_support)

    # self.dual2 = GNN_nl(128 + self.n_way, 96, self.n_way)
    self.dual = GNN(128 + self.n_way, 96, self.n_way, self.n_support)

    labels = torch.from_numpy(np.repeat(range(n_way), n_support)).unsqueeze(1)
    labels = torch.zeros(n_way*n_support, n_way).scatter(1, labels, 1).view(n_way, n_support, n_way) 
    labels = torch.cat([labels, torch.zeros(n_way, 1, n_way)], dim=1)
    self.labels = labels.view(1, -1, n_way)

  def cuda(self):
    self.feature.cuda()
    self.fc.cuda()
    self.prime.cuda()
    # self.prime2.cuda()
    self.dual.cuda()
    # self.dual2.cuda()
    self.labels = self.labels.cuda()
    return self

  def forward_prime(self, x):
      # first apply Resnet on x 
      if torch.cuda.is_available():
        x = x.cuda() 
      
      out = self.feature(x.view(-1, *x.size()[2:]))
      out = self.fc(out)
      out = out.view(self.n_way, -1, out.size(1))

      # Reshape z : n_way x (n_support + nquery) * feature_size(128) => n_q x n_way(n_s + 1) x feature_size
      prime_in = torch.cat([torch.cat([torch.cat([out[:, :self.n_support],
                 out[:, self.n_support + i: self.n_support + i + 1]], dim=1).view(1, -1, out.size(2)), self.labels], dim = 2) for i in range(self.n_query)], dim=0)


      prime_out, _ = self.prime(prime_in)
      prime_predicted_scores = prime_out[:,:,-self.n_way:]
      dual_in = torch.zeros_like(prime_in)

      for i in range(self.n_way):
      
        dual_in[:, (self.n_support+1)*i:self.n_support-1+(self.n_support+1)*i, :] = prime_in[:, (self.n_support+1)*i:self.n_support-1+(self.n_support+1)*i, :]
        dual_in[:,self.n_support-1+(self.n_support+1)*i:self.n_support+(self.n_support+1)*i,:] = prime_in[:,self.n_support+(self.n_support+1)*i:self.n_support+1+(self.n_support+1)*i,:]
        dual_in[:,self.n_support-1+(self.n_support+1)*i:self.n_support+(self.n_support+1)*i,128:] = prime_predicted_scores[:,self.n_support+(self.n_support+1)*i:self.n_support+1+(self.n_support+1)*i,:]                  

        dual_in[:,self.n_support+(self.n_support+1)*i:self.n_support+1+(self.n_support+1)*i,:128] = prime_in[:,self.n_support-1+(self.n_support+1)*i:self.n_support+(self.n_support+1)*i,:128]
      
      
      dual_out, _= self.dual(dual_in)
      dual_predicted_scores = dual_out[:,:,-self.n_way:]
      prime_predicted_scores = prime_predicted_scores.view(self.n_query, self.n_way, self.n_support + 1, self.n_way)[:, :, -1].permute(1, 0, 2).contiguous().view(-1, self.n_way)
      dual_predicted_scores = dual_predicted_scores.view(self.n_query, self.n_way, self.n_support + 1, self.n_way)[:, :, -1].permute(1, 0,2).contiguous().view( -1, self.n_way)
      
      return prime_predicted_scores, dual_predicted_scores


  def forward_dual(self, x): # forward prime et dual sont les mêmes fonctions en inversant prime et dual, une fonction suffit
       # first apply Resnet on x 
      if torch.cuda.is_available():
        x = x.cuda() 

      out = self.feature(x.view(-1, *x.size()[2:]))
      out = self.fc(out)
      out = out.view(self.n_way, -1, out.size(1))

      # Reshape z : n_way x (n_support + nquery) * feature_size(128) => n_q x n_way(n_s + 1) x feature_size
      prime_in = torch.cat([torch.cat([torch.cat([out[:, :self.n_support],
                 out[:, self.n_support + i: self.n_support + i + 1]], dim=1).view(1, -1, out.size(2)), self.labels], dim = 2) for i in range(self.n_query)], dim=0)
      dual_in = torch.zeros_like(prime_in)

      for i in range(self.n_way):
        dual_in[:, (self.n_support+1)*i:self.n_support+(self.n_support+1)*i, :] = prime_in[:, (self.n_support+1)*i:self.n_support+(self.n_support+1)*i, :]
        dual_in[:, self.n_support-1+(self.n_support+1)*i:self.n_support+(self.n_support+1)*i,:128] = prime_in[:,self.n_support+
(self.n_support+1)*i:self.n_support+1+(self.n_support+1)*i,:128]
        dual_in[:, self.n_support+(self.n_support+1)*i:self.n_support+1+(self.n_support+1)*i,:128] = prime_in[:,self.n_support-1+
(self.n_support+1)*i:self.n_support+(self.n_support+1)*i,:128]
        
        

      dual_out, _ = self.dual(dual_in)
      dual_predicted_scores = dual_out[:,:,-self.n_way:]
      
      for i in range(self.n_way):
        prime_in[:,self.n_support-1+(self.n_support+1)*i:self.n_support+(self.n_support+1)*i,128:] = dual_predicted_scores[:,self.n_support+(self.n_support+1)*i:self.n_support+1+(self.n_support+1)*i,:]

        
      prime_out,_ = self.prime(prime_in)
      prime_predicted_scores = prime_out[:,:,-self.n_way:] 

      prime_predicted_scores = prime_predicted_scores.view(self.n_query, self.n_way, self.n_support + 1, self.n_way)[:, :, -1].permute(1, 0, 2).contiguous().view(-1, self.n_way)
      dual_predicted_scores = dual_predicted_scores.view(self.n_query, self.n_way, self.n_support + 1, self.n_way)[:, :, -1].permute(1, 0,2).contiguous().view( -1, self.n_way)

      return prime_predicted_scores, dual_predicted_scores

"""#Training"""

def train(model, train_loader, test_loader, path,   nb_epoch, lr, alpha = 0.5, mode = "Prime"):
  if mode == "Prime":
    optimizer = torch.optim.Adam(list(model.fc.parameters()) + list(model.prime.parameters()), lr=lr)
  elif mode == "Dual":
    optimizer = torch.optim.Adam(list(model.fc.parameters()) + list(model.dual.parameters()), lr=lr)

  model.train()
  max_acc = 0
  for epoch in range(nb_epoch):
    avg_loss = 0
    avg_loss_prime = 0
    avg_loss_dual = 0
    for i, (x,_ ) in enumerate(train_loader):
      optimizer.zero_grad()

      labels = torch.from_numpy(np.repeat(range(model.n_way), model.n_query))
      if torch.cuda.is_available():
        labels = labels.cuda()

      if mode == "Prime":
        prime_predicted_scores, dual_predicted_scores = model.forward_prime(x) 
        loss_prime = model.loss(prime_predicted_scores, labels)
        loss_dual = model.loss(dual_predicted_scores, labels)
        loss = loss_prime + alpha*loss_dual
      
      elif mode == "Dual":
        prime_predicted_scores, dual_predicted_scores = model.forward_dual(x)
        loss_prime = model.loss(prime_predicted_scores, labels)
        loss_dual = model.loss(dual_predicted_scores, labels)
        loss = alpha*loss_prime + loss_dual

      

      loss.backward()
      optimizer.step()

      avg_loss = avg_loss+loss.item()
      avg_loss_prime= avg_loss_prime + loss_prime.item()
      avg_loss_dual = avg_loss_dual + loss_dual.item()

      if (i + 1) % 50 == 0:
        print('Mode {:s} Epoch {:d} | Batch {:d}/{:d} | avg_Loss {:f}, avg_loss_prime {:f}, avg_loss_dual {:f}'.format\
              (mode, epoch, i + 1,len(train_loader),avg_loss / float(i + 1),avg_loss_prime / float(i+1),avg_loss_dual/float(i+1)))
    avg_acc = test(model, test_loader, mode = mode)  
    if avg_acc > max_acc:
      max_acc = avg_acc
      with path.open("wb") as fp:
        print("Saved best model")
        torch.save(model.state_dict(),fp)

def test(model, test_loader, mode = "Prime"):
    model.eval()
    acc_ = []
    for i, (x,_ ) in enumerate(test_loader):

      labels = torch.from_numpy(np.repeat(range(model.n_way), model.n_query))
      if torch.cuda.is_available():
        labels = labels.cuda()
      if mode == "Prime":
      	prime_predicted_scores, dual_predicted_scores = model.forward_prime(x)
      	y_pred_softmax = F.softmax(prime_predicted_scores, dim = 1)
      else:
      	prime_predicted_scores, dual_predicted_scores = model.forward_dual(x)
      	y_pred_softmax = F.softmax(dual_predicted_scores, dim = 1)
      	

      _ , y_pred_tags = torch.max(y_pred_softmax, dim = 1) 
      
      labels = labels.view(-1)
      y_pred_tags = y_pred_tags.view(-1)
      
      correct = y_pred_tags.eq(labels)   
      acc = correct.sum() / labels.numel()
      acc_.append(acc)

    avg_acc = torch.mean(torch.tensor(acc_)).item()
    print('avg_acc {:f}'.format(avg_acc))
    return avg_acc


